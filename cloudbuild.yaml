steps:
  # pull image from container registry to build from cache, bypasses error if first time building image
  - id: "pull docker image"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        docker pull gcr.io/$PROJECT_ID/dash-cloudrun-demo:latest || exit 0

  # build docker image in target project with git commit tag and latest
  # cache the previous build as a starting point for subsequent builds
  - id: "build docker image from cache"
    name: "gcr.io/cloud-builders/docker"
    args:
      [
        "build",
        "-t",
        "gcr.io/$PROJECT_ID/dash-cloudrun-demo:${SHORT_SHA}",
        "-t",
        "gcr.io/$PROJECT_ID/dash-cloudrun-demo:latest",
        "--cache-from",
        "gcr.io/$PROJECT_ID/dash-cloudrun-demo:latest",
        ".",
      ]

  # push docker image with git commit to container registry
  - id: "push docker image"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/$PROJECT_ID/dash-cloudrun-demo"]

  ###############################################
  # deploy terraform infrastructure
  - id: "branch name"
    name: "alpine"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        echo "***********************"
        echo "$BRANCH_NAME"
        echo "***********************"

  - id: "tf init"
    name: "hashicorp/terraform:0.12.9"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        if [ -d "environments/$BRANCH_NAME/" ]; then
          cd environments/$BRANCH_NAME
          terraform init
        else
          for dir in environments/*/
          do 
            cd ${dir}   
            env=${dir%*/}
            env=${env#*/}
            echo ""
            echo "*************** TERRAFORM INIT ******************"
            echo "******* At environment: ${env} ********"
            echo "*************************************************"
            terraform init || exit 1
            cd ../../
          done
        fi 

  # [START tf-plan]
  - id: "tf plan"
    name: "hashicorp/terraform:0.12.9"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        if [ -d "environments/$BRANCH_NAME/" ]; then
          cd environments/$BRANCH_NAME
          terraform plan
        else
          for dir in environments/*/
          do 
            cd ${dir}   
            env=${dir%*/}
            env=${env#*/}  
            echo ""
            echo "*************** TERRAFOM PLAN ******************"
            echo "******* At environment: ${env} ********"
            echo "*************************************************"
            terraform plan || exit 1
            cd ../../
          done
        fi
  # [END tf-plan]

  # [START tf-apply]
  - id: "tf apply"
    name: "hashicorp/terraform:0.12.9"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        if [ -d "environments/$BRANCH_NAME/" ]; then
          cd environments/$BRANCH_NAME      
          terraform apply -auto-approve
        else
          echo "***************************** SKIPPING APPLYING *******************************"
          echo "Branch '$BRANCH_NAME' does not represent an official environment."
          echo "*******************************************************************************"
        fi
  # [END tf-apply]

  # must set cloudbuild service account with Cloud Run Admin role
  # TODO: add in step like the below if terraform for cloud run service isn't udpated in time
  - id: "allow cloud run unauthenticated"
    name: "gcr.io/cloud-builders/gcloud"
    args:
      [
        "beta",
        "run",
        "services",
        "add-iam-policy-binding",
        "tf-dash-cloud-run-demo",
        "--member",
        "allUsers",
        "--region",
        "us-central1",
        "--role",
        "roles/run.invoker",
      ]

images: ["gcr.io/$PROJECT_ID/dash-cloudrun-demo"] # save image to google container registry
